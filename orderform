function calculatePrice(dessertType, quantity, mixins) {
    // Base prices
    const basePrices = {
        cookies: 12.0,  // per dozen
        cupcakes: 15.0, // per dozen
        lunchbox_cake: 15.0 // per cake
    };

    // Price per unit for less than a dozen
    const perUnitPrices = {
        cookies: 1.0, // per cookie
        cupcakes: 1.25 // per cupcake
    };

    // Mix-in/add-on prices
    const mixinPrices = {
        chocolate_chunks: 2.0,
        toffee_bits: 2.0,
        m&ms: 2.0,
        chopped_pecans: 3.0,
        macadamia_nuts: 3.0,
        white_chocolate_chips: 2.0,
        matcha: 3.0,
        ganache: 2.0,
        salted_caramel: 2.0,
        fruit_preserves: 2.0,
        pastry_cream: 3.0,
        none: 0.0
    };

    let price = 0.0;

    // Calculate base price
    if (dessertType === "cookies" || dessertType === "cupcakes") {
        const dozens = Math.floor(quantity / 12);
        const remainder = quantity % 12;

        price = dozens * basePrices[dessertType];
        if (remainder > 0) {
            price += remainder * perUnitPrices[dessertType];
        }
    } else if (dessertType === "lunchbox_cake") {
        price = quantity * basePrices[dessertType];
    } else {
        throw new Error("Invalid dessert type");
    }

    // Add mix-in prices
    mixins.forEach(mixin => {
        if (mixinPrices.hasOwnProperty(mixin)) {
            price += mixinPrices[mixin] * quantity;
        } else {
            throw new Error(`Invalid mix-in: ${mixin}`);
        }
    });

    return price;
}

function main() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    console.log("Welcome to the Dessert Pricing Calculator!");

    rl.question("Enter your name: ", (name) => {
        rl.question("Enter your email: ", (email) => {
            rl.question("Enter your phone number: ", (phone) => {
                rl.question("Enter your zip code: ", (zip) => {
                    rl.question("Do you have any allergies? (if none, type 'none'): ", (allergies) => {

                        rl.question("Enter the type of dessert (cookies, cupcakes, lunchbox_cake): ", (dessertType) => {
                            rl.question("Enter the quantity: ", (quantityInput) => {
                                const quantity = parseInt(quantityInput, 10);

                                console.log("Available mix-ins for cookies: chocolate_chunks, toffee_bits, m&ms, chopped_pecans, macadamia_nuts, white_chocolate_chips, matcha");
                                console.log("Available add-ons for cupcakes: ganache, salted_caramel, fruit_preserves, pastry_cream");

                                rl.question("Enter mix-ins separated by commas (e.g., chocolate_chunks,toffee_bits): ", (mixinsInput) => {
                                    const mixins = mixinsInput.toLowerCase().split(",");

                                    try {
                                        const totalPrice = calculatePrice(dessertType.toLowerCase(), quantity, mixins);
                                        console.log("\nOrder Summary:");
                                        console.log(`Name: ${name}`);
                                        console.log(`Email: ${email}`);
                                        console.log(`Phone: ${phone}`);
                                        console.log(`Zip Code: ${zip}`);
                                        console.log(`Allergies: ${allergies}`);
                                        console.log(`Dessert: ${dessertType}`);
                                        console.log(`Quantity: ${quantity}`);
                                        console.log(`Mix-ins: ${mixins.join(", ")}`);
                                        console.log(`Total Price: $${totalPrice.toFixed(2)}`);
                                    } catch (error) {
                                        console.log(error.message);
                                    }

                                    rl.close();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

main();
